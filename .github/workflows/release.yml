name: Release ClipperTool

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run flake8 style checks
        run: flake8 src/ --max-line-length=120

      - name: Run tests
        run: pytest tests/

      - name: Build with PyInstaller
        run: |
          pyinstaller ^
            --onefile ^
            --windowed ^
            --icon=src/favicon.ico ^
            --add-data "src/favicon.ico;." ^
            --name ClipperTool ^
            src/main.py

      - name: Archive .exe into .zip
        run: |
          mkdir dist_upload
          cp dist/ClipperTool.exe dist_upload/
          Compress-Archive -Path dist_upload/* -DestinationPath ClipperTool.zip

      - name: Generate and push next version tag
        id: version
        shell: bash
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n1)
          if [[ -z "$latest_tag" ]]; then
            latest_tag="v0.0.0"
          fi
          echo "Latest tag: $latest_tag"

          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"

          echo "New version: $new_version"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$new_version"
          git push origin "$new_version"

          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ClipperTool ${{ steps.version.outputs.version }}
          body: |
            ## ClipperTool Release ${{ steps.version.outputs.version }}

            Auto-generated release from push to `main`.

            **Commit:** ${{ github.sha }}

            **Download ClipperTool.exe:**  
            Extract from `ClipperTool.zip`
          files: ClipperTool.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
